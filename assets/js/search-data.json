{
  
    
        "post0": {
            "title": "Custom solar systems",
            "content": "Overview . Why should I do this? . Because it looks cool? Duh. . . Setup . As it’s own blog page . 1: New post . Create a new .md file in _posts. | . 2: Add code . Go to this link and copy the code from the file and paste it into your new .md file. | . . 3: Enjoy . Look at the new page. | . . How do I play with my solar system? . Manipulating time . In the top-right of the screen there should be a single slider, simulationSpeed. The slider measures how much time in the simualtion will pass every real-time second. . Looking around . Using your mouse or trackpad, click the screen and drag. If the simulation is your homepage background then you CAN NOT move the simulation manually. . Specifying which planet the camera orbits . A dropdown should be present in the top-right of your screen called Camera Target. Select your planet from that drop down and the camera will start tracking that planet instead. . How do I customize it? . This is where the real fun begins. The simulation is pre-built with our solar system as it was in the year 2000 (Pluto is included :D). . . Adding planets . Add planets with this simple line of code: . addAstronomicalObject(new AstronomicalObject(name, radius, mass (kg), position (m), velocity (m/s))); . The name is pretty staightforward. Example: . // Earth addAstronomicalObject(new AstronomicalObject(&#39;Earth&#39;, mass, weight (kg), position (m), velocity (m/s))); . The radius is the radius of the object in meters. Example: . // 6371000 // in meters addAstronomicalObject(new AstronomicalObject(&#39;Earth&#39;, 6371000, weight (kg), position (m), velocity (m/s))); . The mass is the mass of the object in kilograms. Planets have A LOT of mass so I reccomend using scientific notation. Example: . // 5.972e24 // in kilograms addAstronomicalObject(new AstronomicalObject(&#39;Earth&#39;, 6371000, 5.972e24, position (m), velocity (m/s))); . The position is the x-axis, y-axis, and z-axis offset from the origin (0, 0, 0) in meters. The position parameter accepts a list with 3 items. Example: . // [151000000000, 0, 0] // x y z // Each item is in meters addAstronomicalObject(new AstronomicalObject(&#39;Earth&#39;, 6371000, 5.972e24, [151000000000, 0, 0], velocity (m/s))); . The velocity is the x-axis, y-axis, and z-axis velocity in meters per second at the start of the simulation. The velocity parameter accepts a list with 3 items. Example: . // [0, 29785.89, 0] // x y z // Each item is in meters per second addAstronomicalObject(new AstronomicalObject(&#39;Earth&#39;, 6371000, 5.972e24, [151000000000, 0, 0], [0, 29785.89, 0])); . The final code look something like this: . addAstronomicalObject(new AstronomicalObject(&#39;Earth&#39;, 6371000, 5.972e24, [151000000000, 0, 0], [0, 29785.89, 0])); . . Planet colors . You can alter a planet’s colors really easily. Example: . // Instead of earth, put the name of your planet earth.color.set(&#39;green&#39;); . . Adjusting a planet’s angular orbit . To alter a planets orbit its a little more complicated. Either you manually add some X, Y or Z velocity, which will make it angled instead of flat, or you can angle it with a special function I added. The reason we use this special function is because of a simple but annoying problem. If you search up the orbital speed of Pluto for example, NASA lists its orbital speed as 3,710 meters per second. The problem with that is Pluto has an orbit angle of 17.14 degrees. The way to get both orbit velocity and orbit angle correct is to rotate the velocity of pluto by 17.14 degrees with the special rotateVector() function. rotateVector() returns a rotated vector. The function has 4 parameters, the vector to rotate, in this case its space.pluto.velocity, and the last 3 are x-rotation, y-rotation and z-rotation. Rotations are in radians, but by using the DEG * Math.PI / 180 formula inside the parameter you can just type in a degree and it’ll be in radians. Example: . pluto.velocity = rotateVector(pluto.velocity, 0, 17.14 * Math.PI / 180, 0); . Since position is also a vector, like velocity, you can apply the rotateVector() function on a planet’s position to get the orbit perfect. You use this to rotate the apex of the orbit. Note space.pluto.position instead of space.pluto.position Example: . pluto.position = rotateVector(pluto.position, 0, 17.14 * Math.PI / 180, 0); . . Removing the GUI (top-right control menu) . Pretty straightforward, this following code snippet just removes the GUI in the top-right. . // Deletes the GUI gui.destroy(); . Adjust start position of camera . . Adjust the camera position to get a better starting angle. This is especially useful for using the solar sytem as your background, as you are unable to rotate the scene manually. . // Changes x, y and z position of the camera. Camera looks to the first astronimal body you add camera.position.set(-150, 150, 270); . . Adjusting constants . The simSpeed constant is the slider in the GUI, it dictates the speed of the simulation. . The gravity constant is the universal graavitational constant, not exactly sure what happens when you mess with it, but you can. . The scale of the simulation. The current scale is pretty good, but if you really want to you can mess with it. . // Three constants you can alter manually constants = { simSpeed: 371, gravity: 66743e-15, scale: 3e-10 } .",
            "url": "https://tristancopley.github.io/dnhs-blog/jupyter/2030/09/08/solar.html",
            "relUrl": "/jupyter/2030/09/08/solar.html",
            "date": " • Sep 8, 2030"
        }
        
    
  
    
        ,"post1": {
            "title": "Example Solar System Page",
            "content": "",
            "url": "https://tristancopley.github.io/dnhs-blog/markdown/2030/09/07/solarproj.html",
            "relUrl": "/markdown/2030/09/07/solarproj.html",
            "date": " • Sep 7, 2030"
        }
        
    
  
    
        ,"post2": {
            "title": "09/27 Ticket",
            "content": "Overview - Akhil’s grading score: 2.7+ . . Requirements: . . Extends JAVA // Classes: . Completed mini-lab with fibonacci clases and abstraction: LINK . . HTML Stuff: . Homepage: LINK . .",
            "url": "https://tristancopley.github.io/dnhs-blog/markdown/2022/09/27/week5.html",
            "relUrl": "/markdown/2022/09/27/week5.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Fibonacci Sequencing",
            "content": "/* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . public class FibonacciWithMemoization { public static long fibArray[]= new long[93]; public static long fibonacci(long n){ long fibValue=0; if(n==0 ){ return 0; }else if(n==1){ return 1; }else if(fibArray[(int)n]!=0){ return fibArray[(int)n]; }else{ fibValue=fibonacci(n-1)+fibonacci(n-2); fibArray[(int) n]=fibValue; return fibValue; } } public static void main(String args[]){ fibArray[0]=1; fibArray[1]=1; for(int i = 0; i &lt; 93; i++) { long ranth = i;//(long) Math.floor(Math.random() * 92); System.out.println(ranth + &quot;th Fibonacci number: &quot;+fibonacci(ranth)); } } } FibonacciWithMemoization.main(null); . 0th Fibonacci number: 0 1th Fibonacci number: 1 2th Fibonacci number: 1 3th Fibonacci number: 2 4th Fibonacci number: 3 5th Fibonacci number: 5 6th Fibonacci number: 8 7th Fibonacci number: 13 8th Fibonacci number: 21 9th Fibonacci number: 34 10th Fibonacci number: 55 11th Fibonacci number: 89 12th Fibonacci number: 144 13th Fibonacci number: 233 14th Fibonacci number: 377 15th Fibonacci number: 610 16th Fibonacci number: 987 17th Fibonacci number: 1597 18th Fibonacci number: 2584 19th Fibonacci number: 4181 20th Fibonacci number: 6765 21th Fibonacci number: 10946 22th Fibonacci number: 17711 23th Fibonacci number: 28657 24th Fibonacci number: 46368 25th Fibonacci number: 75025 26th Fibonacci number: 121393 27th Fibonacci number: 196418 28th Fibonacci number: 317811 29th Fibonacci number: 514229 30th Fibonacci number: 832040 31th Fibonacci number: 1346269 32th Fibonacci number: 2178309 33th Fibonacci number: 3524578 34th Fibonacci number: 5702887 35th Fibonacci number: 9227465 36th Fibonacci number: 14930352 37th Fibonacci number: 24157817 38th Fibonacci number: 39088169 39th Fibonacci number: 63245986 40th Fibonacci number: 102334155 41th Fibonacci number: 165580141 42th Fibonacci number: 267914296 43th Fibonacci number: 433494437 44th Fibonacci number: 701408733 45th Fibonacci number: 1134903170 46th Fibonacci number: 1836311903 47th Fibonacci number: 2971215073 48th Fibonacci number: 4807526976 49th Fibonacci number: 7778742049 50th Fibonacci number: 12586269025 51th Fibonacci number: 20365011074 52th Fibonacci number: 32951280099 53th Fibonacci number: 53316291173 54th Fibonacci number: 86267571272 55th Fibonacci number: 139583862445 56th Fibonacci number: 225851433717 57th Fibonacci number: 365435296162 58th Fibonacci number: 591286729879 59th Fibonacci number: 956722026041 60th Fibonacci number: 1548008755920 61th Fibonacci number: 2504730781961 62th Fibonacci number: 4052739537881 63th Fibonacci number: 6557470319842 64th Fibonacci number: 10610209857723 65th Fibonacci number: 17167680177565 66th Fibonacci number: 27777890035288 67th Fibonacci number: 44945570212853 68th Fibonacci number: 72723460248141 69th Fibonacci number: 117669030460994 70th Fibonacci number: 190392490709135 71th Fibonacci number: 308061521170129 72th Fibonacci number: 498454011879264 73th Fibonacci number: 806515533049393 74th Fibonacci number: 1304969544928657 75th Fibonacci number: 2111485077978050 76th Fibonacci number: 3416454622906707 77th Fibonacci number: 5527939700884757 78th Fibonacci number: 8944394323791464 79th Fibonacci number: 14472334024676221 80th Fibonacci number: 23416728348467685 81th Fibonacci number: 37889062373143906 82th Fibonacci number: 61305790721611591 83th Fibonacci number: 99194853094755497 84th Fibonacci number: 160500643816367088 85th Fibonacci number: 259695496911122585 86th Fibonacci number: 420196140727489673 87th Fibonacci number: 679891637638612258 88th Fibonacci number: 1100087778366101931 89th Fibonacci number: 1779979416004714189 90th Fibonacci number: 2880067194370816120 91th Fibonacci number: 4660046610375530309 92th Fibonacci number: 7540113804746346429 . public class Fibonacci extends Fibo { public Fibonacci() { super(); } static public void loopPrint(String args[]) { Fibonacci fib = new Fibonacci(); for (int i=0 ; i&lt;fib.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + fib.getNthSeq(i)); } } static public void hashPrint(String args[]) { Fibonacci fib = new Fibonacci(); System.out.println(&quot;fibonacci Hashmap = &quot; + fib.hash); } } Fibonacci.hashPrint(null); . fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] .",
            "url": "https://tristancopley.github.io/dnhs-blog/jupyter/2022/09/23/fibo.html",
            "relUrl": "/jupyter/2022/09/23/fibo.html",
            "date": " • Sep 23, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "09/20 Ticket",
            "content": "Overview - Akhil’s grading score: 2.7+ . . Requirements: . . Iteration Mini-lab: . Completed iteration mini-lab with monkeys: LINK . . FRQ Practice: . Completed FRQ APCSA 2019: LINK . . Extra (Complete): Solar system lab . Creating custom solar systems: LINK . Extra (Progress Update): Codewords . Creating a little box on the homepage that people can add to their blog which is a little like wordle. Daily challenge that people can work together to solve. . Development: .",
            "url": "https://tristancopley.github.io/dnhs-blog/markdown/2022/09/20/week4.html",
            "relUrl": "/markdown/2022/09/20/week4.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "APCSA FRQ 1",
            "content": "public class APCalendar { /** Returns true if year is a leap year and false otherwise. */ private static boolean isLeapYear(int year) { /* implementation not shown */ } /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) { int years = 0; for(int i = year1; i &lt; year2; i++;) { isLeapYear(i); } return years; } /** Returns the value representing the day of the week for the first day of year, * where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. */ private static int firstDayOfYear(int year) { /* implementation not shown */ } /** Returns n, where month, day, and year specify the nth day of the year. * Returns 1 for January 1 (month = 1, day = 1) of any year. * Precondition: The date represented by month, day, year is a valid date. */ private static int dayOfYear(int month, int day, int year) { /* implementation not shown */ } /** Returns the value representing the day of the week for the given date * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., * and 6 denotes Saturday. * Precondition: The date represented by month, day, year is a valid date. */ public static int dayOfWeek(int month, int day, int year) { /* to be implemented in part (b) */ } // There may be instance variables, constructors, and other methods not shown. } . Scoring (5/5) . Initialize numeric variable (count) 1/1 | Loop through each necessary year in range (for loop, with condition in code block) 1/1 | Calls isLeapYear on valid year in range 1/1 | Update count based on result of isLeapYear 1/1 | Return count of leap years 1/1 | . (b) Write the static method dayOfWeek, which returns the integer value representing the day of the week for the given date (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, 2019 began on a Tuesday, and January 5 is the fifth day of 2019. As a result, January 5, 2019, fell on a Saturday, and the method call dayOfWeek(1, 5, 2019) returns 6. As another example, January 10 is the tenth day of 2019. As a result, January 10, 2019, fell on a Thursday, and the method call dayOfWeek(1, 10, 2019) returns 4. In order to calculate this value, two helper methods are provided for you. • firstDayOfYear(year) returns the integer value representing the day of the week for the first day of year, where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, since 2019 began on a Tuesday, firstDayOfYear(2019) returns 2. • dayOfYear(month, day, year) returns n, where month, day, and year specify the nth day of the year. For the first day of the year, January 1 (month = 1, day = 1), the value 1 is returned. This method accounts for whether year is a leap year. For example, dayOfYear(3, 1, 2017) returns 60, since 2017 is not a leap year, while dayOfYear(3, 1, 2016) returns 61, since 2016 is a leap year. . public class APCalendar { /** Returns true if year is a leap year and false otherwise. */ private static boolean isLeapYear(int year) { /* implementation not shown */ } /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) { int years = 0; for(int i = year1; i &lt; year2; i++;) { isLeapYear(i); } return years; } /** Returns the value representing the day of the week for the first day of year, * where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. */ private static int firstDayOfYear(int year) { /* implementation not shown */ } /** Returns n, where month, day, and year specify the nth day of the year. * Returns 1 for January 1 (month = 1, day = 1) of any year. * Precondition: The date represented by month, day, year is a valid date. */ private static int dayOfYear(int month, int day, int year) { /* implementation not shown */ } /** Returns the value representing the day of the week for the given date * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., * and 6 denotes Saturday. * Precondition: The date represented by month, day, year is a valid date. */ public static int dayOfWeek(int month, int day, int year) { return (dayOfYear(month, day, year) - 1 + firstDayOfYear(year)) % 7; } // There may be instance variables, constructors, and other methods not shown. } . Scoring (4/4) . Call firstDayofYear 1/1 | Calls dayOfYear 1/1 | Calculate value representing day of week (-1, incorrect calculation) 1/1 | Return calculated value 1/1 | .",
            "url": "https://tristancopley.github.io/dnhs-blog/jupyter/2022/09/17/csafrq1.html",
            "relUrl": "/jupyter/2022/09/17/csafrq1.html",
            "date": " • Sep 17, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Monkey Monkey Monkey",
            "content": "class MonkeyLoop { String [][] monkeys; String [][] words; public MonkeyLoop() { words = new String[][]{ {&quot;Five little monkeys jumping on the bed,&quot;, &quot;One fell down and bumped his head,&quot;, &quot;Mama called the doctor and the doctor said,&quot;, &quot;No more monkeys jumping on the bed!&quot;}, {&quot;Four little monkeys jumping on the bed,&quot;, &quot;One fell down and bumped his head,&quot;, &quot;Mama called the doctor and the doctor said,&quot;, &quot;No more monkeys jumping on the bed!&quot;}, {&quot;Three little monkeys jumping on the bed,&quot;, &quot;One fell down and bumped her head,&quot;, &quot;Mama called the doctor and the doctor said,&quot;, &quot;No more monkeys jumping on the bed!&quot;}, {&quot;Two little monkeys jumping on the bed,&quot;, &quot;One fell down and bumped his head,&quot;, &quot;Mama called the doctor and the doctor said,&quot;, &quot;No more monkeys jumping on the bed!&quot;}, {&quot;One little monkey jumping on the bed,&quot;, &quot;She fell down and bumped her head,&quot;, &quot;Mama called the doctor and the doctor said,&quot;, &quot;Put those monkeys back to bed!&quot;} }; monkeys = new String[][]{ { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, &quot; _⏄_/ &quot;, &quot; --0-- &quot;, &quot; ⎛ ⎞ &quot; }, { &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, { &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, { &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, { &quot; (◕‿◕✿) &quot;, &quot; _⍾_/ &quot;, &quot; ==4== &quot;, &quot; _/ _ &quot; }, }; } public void printPoem() { System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); System.out.println(); int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) { for(int wordcol = 0; wordcol &lt; 3; wordcol++) { System.out.println(words[5-i][wordcol] + &quot;&quot;); } for (int col = 0; col &lt; monkeys[col].length; col++) { //cycles through each row of the monkeys /*cycles through rows to print each monkey&#39;s part by part, will eventually print entire row*/ for (int row = 0; row &lt; monkeyCount; row++) { // prints specific part of the monkey from the column System.out.print(monkeys[row][col] + &quot; &quot;); System.out.print(&quot; t&quot;); } System.out.println(); } System.out.println(); monkeyCount -= 1; } System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } public static void main(String[] args) { new MonkeyLoop().printPoem(); } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy Five little monkeys jumping on the bed, One fell down and bumped his head, Mama called the doctor and the doctor said, ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ Four little monkeys jumping on the bed, One fell down and bumped his head, Mama called the doctor and the doctor said, ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ Three little monkeys jumping on the bed, One fell down and bumped her head, Mama called the doctor and the doctor said, ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 Two little monkeys jumping on the bed, One fell down and bumped his head, Mama called the doctor and the doctor said, ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ One little monkey jumping on the bed, She fell down and bumped her head, Mama called the doctor and the doctor said, ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END .",
            "url": "https://tristancopley.github.io/dnhs-blog/jupyter/2022/09/16/monkey.html",
            "relUrl": "/jupyter/2022/09/16/monkey.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "09/11 Ticket",
            "content": "Deployment . Deployed Site 1: photoboard.ddns.net . Deployed Site 2: tristanjava.ddns.net . Lesson On Conditionals . Lesson on Conditionals . Focus/Habits/Productive Blogging . Solar simulation blog: LINK . My Fastpages has failed to deploy multiple times and I can’t get it running. .",
            "url": "https://tristancopley.github.io/dnhs-blog/markdown/2022/09/11/week3.html",
            "relUrl": "/markdown/2022/09/11/week3.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "IF-ELSE Explanations",
            "content": "// All of the boolean expressions below evaluate to true if (true) { System.out.println(&quot;True code block&quot;); } if (true &amp;&amp; !false) { System.out.println(&quot;True and Not False code block&quot;); } if (true || false) { System.out.println(&quot;True or False code block&quot;); } if ((true &amp;&amp; !false) &amp;&amp; (true || false)) { System.out.println(&quot;Confusing code block&quot;); } if (!((false || !true) || (false &amp;&amp; true))) { System.out.println(&quot;De Morgan&#39;s law in my head of confusing code block&quot;); } // Can any of the above expression be simplified? What would they simplify to? Are any of these expressions useful? . They can all be simplified down to just System.out.println(&quot;True&quot;);. Also, these are all useless. Wrapping code in a statment that is guaranteed to be true doesn&#39;t make sense. However, if you were to replace true/false with variables they may appear to be useful. . A combination of &amp;&amp; and || and ! are useful for many different occasions. . Notes . If, else and booleans are useful. I use a complex set of IF and ELSE statments with boolean parameters in this project. This is an example of my extensive knowledge of if - else statments. . De Morgan&#39;s Law Complex conditional statements can be hard to evaluate when looking at &quot;!&quot; or &quot;not&quot; operators, and comparison operators, like &gt;, &lt;, &gt;=, &lt;=, ||, &amp;&amp;, and more . De morgan&#39;s law helps by explaining how operators change when a &quot;!&quot; negation is present . Conversions: &lt;= goes to &gt; &gt;= goes to &lt; &lt; goes to &gt;= &gt; goes to &lt;= == goes to != != becomes == .",
            "url": "https://tristancopley.github.io/dnhs-blog/jupyter/2022/09/11/ifelse.html",
            "relUrl": "/jupyter/2022/09/11/ifelse.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Using Java Objects for Average Calculator",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes private void average() { Scanner input; double sampleInputInt = 0.0; double total = 0; // primitive int input = new Scanner(System.in); System.out.print(&quot;How many numbers do you want to average: &quot;); try { sampleInputInt = input.nextInt(); System.out.println(sampleInputInt); } catch (Exception e) { // if not an integer System.out.println(&quot;Not an int (form like 159), &quot; + e); } input.close(); for (int i = 0; i &lt; sampleInputInt; i += 1) { if (i == 0) { System.out.print(&quot;Add your first number: &quot;); } else { System.out.print(&quot;Add another number: &quot;); } input = new Scanner(System.in); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); total += sampleInputDouble; } catch (Exception e) { // if not an integer System.out.println(&quot;Not a double (form like 159 or 1.1), &quot; + e); } input.close(); } total /= sampleInputInt; System.out.print(&quot;Your average is: &quot;); System.out.println(total); } // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;4 - Average Calculator&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; case 4: average(); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Output colors 3 - Loading in color 4 - Average Calculator 0 - Quit - 4: How many numbers do you want to average: 3.0 Add your first number: 1.0 Add another number: 2.0 Add another number: 9.0 Your average is: 4.0 0: Goodbye, World! .",
            "url": "https://tristancopley.github.io/dnhs-blog/jupyter/2022/09/06/menu.html",
            "relUrl": "/jupyter/2022/09/06/menu.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Java Average Calculator",
            "content": "// java style to import library import java.util.Scanner; // class must alway have 1st letter as uppercase, CamelCase is Java Class convention public class ScanPrimitives { public static void main(String[] args) { Scanner input; double sampleInputInt = 0.0; double total = 0; // primitive int input = new Scanner(System.in); System.out.print(&quot;How many numbers do you want to average: &quot;); try { sampleInputInt = input.nextInt(); System.out.println(sampleInputInt); } catch (Exception e) { // if not an integer System.out.println(&quot;Not an int (form like 159), &quot; + e); } input.close(); for (int i = 0; i &lt; sampleInputInt; i += 1) { if (i == 0) { System.out.print(&quot;Add your first number: &quot;); } else { System.out.print(&quot;Add another number: &quot;); } input = new Scanner(System.in); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); total += sampleInputDouble; } catch (Exception e) { // if not an integer System.out.println(&quot;Not a double (form like 159 or 1.1), &quot; + e); } input.close(); } total /= sampleInputInt; System.out.print(&quot;Your average is: &quot;); System.out.println(total); } } ScanPrimitives.main(null); . How many numbers do you want to average: 2.0 Add your first number: 1.0 Add another number: 3.0 Your average is: 2.0 .",
            "url": "https://tristancopley.github.io/dnhs-blog/jupyter/2022/08/29/calc.html",
            "relUrl": "/jupyter/2022/08/29/calc.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Java Example of primitives",
            "content": "// java style to import library import java.util.Scanner; // class must alway have 1st letter as uppercase, CamelCase is Java Class convention public class ScanPrimitives { public static void main(String[] args) { Scanner input; // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter an integer: &quot;); try { int sampleInputInt = input.nextInt(); System.out.println(sampleInputInt); } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive double input = new Scanner(System.in); System.out.print(&quot;Enter a double: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); // primitive boolean input = new Scanner(System.in); System.out.print(&quot;Enter a boolean: &quot;); try { boolean sampleInputBoolean = input.nextBoolean(); System.out.println(sampleInputBoolean); } catch (Exception e) { // if not true or false System.out.println(&quot;Not an boolean (true or false), &quot; + e); } input.close(); // wrapper class String input = new Scanner(System.in); System.out.print(&quot;Enter a String: &quot;); try { String sampleInputString = input.nextLine(); System.out.println(sampleInputString); } catch (Exception e) { // this may never happen System.out.println(&quot;Not an String, &quot; + e); } input.close(); } } ScanPrimitives.main(null); . Enter an integer: 9 Enter a double: 9.1 Enter a boolean: true Enter a String: Things .",
            "url": "https://tristancopley.github.io/dnhs-blog/jupyter/2022/08/28/primitives.html",
            "relUrl": "/jupyter/2022/08/28/primitives.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Python Notebook",
            "content": "print(&#39;hello&#39;) . hello .",
            "url": "https://tristancopley.github.io/dnhs-blog/jupyter/2022/08/22/hellopy.html",
            "relUrl": "/jupyter/2022/08/22/hellopy.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Java Notebook",
            "content": "System.out.println(&quot;Hello World&quot;); . Hello World .",
            "url": "https://tristancopley.github.io/dnhs-blog/jupyter/2022/08/22/hellojava.html",
            "relUrl": "/jupyter/2022/08/22/hellojava.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "09/06 Ticket",
            "content": "SCORED BY AKHIL 2.7+ POINTS OF 3 | 2.7/3 FINAL SCORE . Week 2 Using Objects . Week 2 Requirements . Sep 5, 2022 • 1 min read . Tickets . Code.org . Java Using Objects and PBL design | Extra! | Code.org | . Completion through lesson 15 . . Java Using Objects and PBL design . Build a Console GUI focused on Java Math Class: LINK . Extra! . Completing solar system simulation (Used real world data and physics) (Not console app but imbedded in website) .",
            "url": "https://tristancopley.github.io/dnhs-blog/markdown/2020/09/06/ticketweek3.html",
            "relUrl": "/markdown/2020/09/06/ticketweek3.html",
            "date": " • Sep 6, 2020"
        }
        
    
  
    
        ,"post15": {
            "title": "08/29 Ticket",
            "content": "SCORED BY AKHIL 2.7 POINTS OF 3 | 2.7/3 FINAL SCORE . Did extra work with very nice background but was missing college board learning notes | . Points will be awarded on these three key elements . Seeing that you understand how to use Code.org and that you used it to complement your learning on primitives. Up to Lesson 5 in the OOP assignment. Productive Blogging Create a Jupyter Notebook(s) using IJava kernel and that you could use it to capture key learning on Primitives. Create a Jupyter Notebook using Bash and that you could use it to show that you have all the key tools installed. This should also be a Blog for your own personal memory. Each student captures information in Fastpages thinking … how they are going to capture information that will grow to 10 college board units … how they will recognize something as PBL vs College Board. Presentation of Results at Monday meeting. Turn in of Review Ticket (Issue or Fastpages) will be by comment on Fastpages blog: https://nighthawkcoders.github.io/APCSA/techtalk/fastpages (Links to an external site.). See Slack for team instructions . Canvas Requirements . Productive Blogging . Create a Jupyter Notebook(s) using IJava to capture key learning on Primitives: LINK | Create a Jupyter Notebook using Bash to show that you have all the key tools installed: LINK | Capture information that will grow to 10 college board units: LINK Code.org . . Extra! . | Created a number averager. It takes in how ever many numbers you want, and it will then output the average. | Link to calculator | Tristan’s CSA Blog | .",
            "url": "https://tristancopley.github.io/dnhs-blog/markdown/2020/08/29/ticket.html",
            "relUrl": "/markdown/2020/08/29/ticket.html",
            "date": " • Aug 29, 2020"
        }
        
    
  
    
        ,"post16": {
            "title": "Checks for installations",
            "content": "python --version python2 --version python3 --version conda --version jupyter --version jupyter kernelspec list . Python 3.9.12 Python 2.7.18 Python 3.9.12 conda 4.13.0 Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: python3912jvsc74a57bd00a5aca3dd4806e9dff1f4f9e908a527b197091f2275dd8883ea66601e4d4e36e /Users/tristancopley/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3912jvsc74a57bd00a5aca3dd4806e9dff1f4f9e908a527b197091f2275dd8883ea66601e4d4e36e bash /Users/tristancopley/Library/Jupyter/kernels/bash java /Users/tristancopley/Library/Jupyter/kernels/java javascript /Users/tristancopley/Library/Jupyter/kernels/javascript python3 /Users/tristancopley/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://tristancopley.github.io/dnhs-blog/jupyter/2020/08/29/checks.html",
            "relUrl": "/jupyter/2020/08/29/checks.html",
            "date": " • Aug 29, 2020"
        }
        
    
  
    
        ,"post17": {
            "title": "Week0",
            "content": "I like men .",
            "url": "https://tristancopley.github.io/dnhs-blog/2020/08/19/week0.html",
            "relUrl": "/2020/08/19/week0.html",
            "date": " • Aug 19, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://tristancopley.github.io/dnhs-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "About Me",
          "content": "Unit 1: .",
          "url": "https://tristancopley.github.io/dnhs-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://tristancopley.github.io/dnhs-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}